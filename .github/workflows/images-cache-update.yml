name: Scheduled Refresh Bitbake Downloads

# An action to perform a initialization of build/downloads

on:
  workflow_dispatch:

jobs:

  job-execute:
    name: bitbake ${{ matrix.DISTRO }} ${{ matrix.MACHINE }} ${{ matrix.IMAGES }}
    runs-on: [ self-hosted, debian ]
    permissions:
      actions: write
    continue-on-error: true
    strategy:
      max-parallel: 1
      matrix:
        DISTRO:
          - distro-core
          - distro-core-gui
        MACHINE:
          - com-cexpress-bt
          - com-cexpress-sl
          - sbc-gene-bt05
          - sbc-raspberrypi5
          - sbc-xavier-nx-devkit
        IMAGES:
          - distro-image distro-sdk-image
        MANIFEST_URL:
          - https://github.com/distro-core/distro-manifest.git
        MANIFEST_BRANCH:
          - main
        MANIFEST_NAME:
          - distro-head-scarthgap.xml
    steps:
      - shell: bash
        run: |
          echo "::debug::local path"
          echo "::add-mask::$HOME"
          if [[ :$PATH: == *:"$HOME/.local/bin":* ]]; then
            echo "::debug::PATH alredy contains $HOME/.local/bin"
          else
            localbin=$HOME/.local/bin
            mkdir -p $localbin
            echo "PATH=$localbin:$PATH" >> $GITHUB_ENV
          fi
          echo "::debug::environment"
          echo "MACHINE=${{ matrix.MACHINE }}" >>$GITHUB_ENV
          echo "DISTRO=${{ matrix.DISTRO }}" >>$GITHUB_ENV
          echo "IMAGES=${{ matrix.IMAGES }}" >>$GITHUB_ENV
          echo "MANIFEST_URL=${{ matrix.MANIFEST_URL }}" >>$GITHUB_ENV
          echo "MANIFEST_BRANCH=${{ matrix.MANIFEST_BRANCH }}" >>$GITHUB_ENV
          echo "MANIFEST_NAME=${{ matrix.MANIFEST_NAME }}" >>$GITHUB_ENV
          echo "DL_DIR=$GITHUB_WORKSPACE/build/downloads" >>$GITHUB_ENV
          echo "SSTATE_CACHE=$GITHUB_WORKSPACE/build/sstate-cache" >>$GITHUB_ENV
          echo "DEPLOY_DIR=$GITHUB_WORKSPACE/artifacts/${{ matrix.MACHINE }}" >>$GITHUB_ENV
          echo "TEMPLATECONF=$GITHUB_WORKSPACE/layers/meta-distro/conf/templates/${{ matrix.DISTRO }}" >>$GITHUB_ENV
          echo "::debug::install git settings"
          git config --global http.sslVerify true
      - uses: actions/cache/restore@v4
        continue-on-error: true
        with:
          key: build-downloads
          path: |
            build/downloads
      # - uses: actions/cache/restore@v4
      #   continue-on-error: true
      #   with:
      #     key: build-sstate-cache
      #     path: |
      #       build/sstate-cache
      - uses: distro-core/gh-actions-retry@v3
        with:
          timeout_minutes: 60
          retry_wait_seconds: 120
          max_attempts: 2
          retry_on: error
          shell: bash
          command: |
            echo "::debug::repo init and sync"
            [[ -n "$(command -v repo)" ]] || (echo "::error::repo not found"; exit 1)
            repo init --manifest-url=$MANIFEST_URL --manifest-branch=$MANIFEST_BRANCH --manifest-name=$MANIFEST_NAME --no-clone-bundle
            repo sync
            echo "::debug::oe-init-build-env"
            {
              TEMPLATECONF=$TEMPLATECONF . $GITHUB_WORKSPACE/layers/poky/oe-init-build-env $GITHUB_WORKSPACE/build/$MACHINE
            } >/dev/null
            bitbake --runall=fetch $IMAGES
            echo "::notice::complete $DISTRO $MACHINE $IMAGES"
      - uses: actions/cache/save@v4
        continue-on-error: true
        with:
          key: build-downloads
          path: |
            build/downloads
            !build/downloads/git2/**
            !build/downloads/*.done
            !build/downloads/*.lock
            !build/downloads/tmp*
            !build/downloads/*tmp
      # - uses: actions/cache/save@v4
      #   continue-on-error: true
      #   with:
      #     key: build-downloads
      #     path: |
      #       build/sstate-cache
      #       !build/sstate-cache/**/*.done
      #       !build/sstate-cache/**/*.lock
      #       !build/sstate-cache/**/tmp*
      #       !build/sstate-cache/**/*tmp
