name: Scheduled Refresh Bitbake Downloads

# An action to perform a initialization of build/downloads

on:
  workflow_dispatch:

jobs:

  # Requires runner to have a label = runner.name
  get-runner:
    if: ${{ always() }}
    runs-on: [ self-hosted, debian ]
    outputs:
      RUNNER: ${{ runner.name }}
    steps:
      - run: echo "::notice::selected runner ${{ runner.name }}"

  job-init:
    needs: [ get-runner ]
    runs-on: ${{ needs.get-runner.outputs.RUNNER }}
    permissions:
      actions: write
    continue-on-error: false
    steps:
      - shell: bash
        run: |
          echo "::debug::local path"
          echo "::add-mask::$HOME"
          if [[ :$PATH: == *:"$HOME/.local/bin":* ]]; then
            echo "::notice::PATH alredy contains $HOME/.local/bin"
          else
            localbin=$HOME/.local/bin
            mkdir -p $localbin
            echo "PATH=$localbin:$PATH" >> $GITHUB_ENV
          fi
          echo "::debug::install git settings"
          [[ -n "$(command -v git)" ]] || (echo "::error::git not found"; exit 1)
          git config --global http.sslVerify true

  job-sync:
    needs: [ get-runner, job-init ]
    runs-on: ${{ needs.get-runner.outputs.RUNNER }}
    permissions:
      actions: write
    continue-on-error: false
    steps:
      - shell: bash
        run: |
          echo "::debug::environment"
          echo "MANIFEST_URL=https://github.com/distro-core/distro-manifest.git" >>$GITHUB_ENV
          echo "MANIFEST_BRANCH=main" >>$GITHUB_ENV
          echo "MANIFEST_NAME=distro-head-scarthgap.xml" >>$GITHUB_ENV
          echo "::debug::repo init and sync"
          [[ -n "$(command -v repo)" ]] || (echo "::error::repo not found"; exit 1)
          repo init --manifest-url=$MANIFEST_URL --manifest-branch=$MANIFEST_BRANCH --manifest-name=$MANIFEST_NAME --no-clone-bundle
          repo sync

  job-bitbake:
    needs: [ get-runner, job-sync ]
    runs-on: ${{ needs.get-runner.outputs.RUNNER }}
    permissions:
      actions: write
    continue-on-error: false
    steps:
      - shell: bash
        run: |
          for distro in distro-core distro-core-gui; do
            for machine in com-cexpress-bt com-cexpress-sl sbc-gene-bt05 sbc-raspberrypi5 sbc-xavier-nx-devkit; do
              export DISTRO=$distro
              export MACHINE=$machine
              export BUILD_DIR=$GITHUB_WORKSPACE/build/$MACHINE
              export DEPLOY_DIR=$GITHUB_WORKSPACE/artifacts/$MACHINE
              export DL_DIR=$GITHUB_WORKSPACE/build/downloads
              export SSTATE_CACHE=$GITHUB_WORKSPACE/build/sstate-cache
              TEMPLATECONF=$GITHUB_WORKSPACE/layers/meta-distro/conf/templates/$distro
              rm -fr $BUILD_DIR $DEPLOY_DIR
              mkdir -p $BUILD_DIR $DEPLOY_DIR
              echo "::notice::oe-init-build-env $distro $machine"
              TEMPLATECONF=$TEMPLATECONF . $GITHUB_WORKSPACE/layers/poky/oe-init-build-env $BUILD_DIR
              bitbake --runall=fetch distro-image distro-sdk-image
              cd $GITHUB_WORKSPACE
              rm -fr $BUILD_DIR $DEPLOY_DIR
            done
          done
          echo "::notice::complete"

  job-artifacts:
    needs: [ get-runner, job-bitbake ]
    runs-on: ${{ needs.get-runner.outputs.RUNNER }}
    permissions:
      actions: write
    continue-on-error: false
    steps:
      - uses: actions/artifacts-upload@v4
        with:
          name: build-downloads
          compression-level: 9
          if-no-files-found: error
          overwrite: true
          path: |
            build/downloads/*
            !build/downloads/git2/
            !build/downloads/*.done
            !build/downloads/*.lock
            !build/downloads/tmp*
            !build/downloads/*tmp
