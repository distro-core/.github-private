name: Images Build

# An action to perform a default images build for the selected
# devices. Requires organization secrets SSH_PUBLIC_KEY and
# SSH_PRIVATE_KEY be defined and valid for successful sync to
# the repositories referenced in the manifest.

# This action is targeted to runners [ self-hosted, almalinux ]

on:
  workflow_dispatch:

env:
  DISTROS: distro-core distro-full
  MACHINES: sbc-gene-bt06
  MANIFEST_URI: git@github.com:distro-core/distro-manifest.git
  MANIFEST_BRANCH: main
  MANIFEST_NAME: distro-head-scarthgap.xml
  SSH_PUBLIC_KEY: ${{ vars.SSH_PUBLIC_KEY }}
  SSH_PRIVATE_KEY: ${{ vars.SSH_PRIVATE_KEY }}

defaults:
  run:
    shell: bash

jobs:
  job-images-build:
    runs-on: [ self-hosted, almalinux ]
    steps:
      - name: mask variable SSH_PRIVATE_KEY
        if: ${{ vars.SSH_PUBLIC_KEY }}
        run: |
          (
            while read -r line
            do
              echo "::add-mask::${line}"
            done <<< "$SSH_PRIVATE_KEY"
          )
          echo "test mask of SSH_PRIVATE_KEY"
          echo -e "$SSH_PRIVATE_KEY"
      - name: secrets install ssh key
        run: |
          mkdir -p ${HOME}/.ssh
          chmod 0700 ${HOME}/.ssh
          touch ${HOME}/.ssh/id_ed25519.pub
          chmod 0644 ${HOME}/.ssh/id_ed25519.pub
          touch ${HOME}/.ssh/id_ed25519
          chmod 0600 ${HOME}/.ssh/id_ed25519
          touch ${HOME}/.ssh/config
          chmod 0644 ${HOME}/.ssh/config
          cat >${HOME}/.ssh/id_ed25519.pub <<EOF
          $SSH_PUBLIC_KEY
          EOF
          cat >${HOME}/.ssh/id_ed25519 <<EOF
          $SSH_PRIVATE_KEY
          EOF
          if ! grep -q -e '.ssh/id_ed25519$' ${HOME}/.ssh/config; then
            printf '\nHost *\n  IdentitiesOnly yes\n  IdentityFile %s\n\n%s' "${HOME}/.ssh/id_ed25519" "$(cat ${HOME}/.ssh/config)" >${HOME}/.ssh/config
          fi
          ssh git@github.com || true
      # - name: install host dependency
      #   run: |
      #     source /etc/os-release
      #     case ${ID} in
      #     almalinux*)
      #       echo sudo dnf install -y epel-release
      #       echo sudo yum install -y dnf-plugins-core
      #       echo sudo dnf config-manager --set-enabled crb
      #       echo sudo dnf makecache
      #       echo sudo dnf upgrade -y
      #       echo sudo dnf install -y gawk make wget tar bzip2 gzip python3 unzip perl patch \
      #         diffutils diffstat git cpp gcc gcc-c++ glibc-devel texinfo chrpath \
      #         ccache socat perl-Data-Dumper perl-Text-ParseWords perl-Thread-Queue \
      #         python3-pip python3-GitPython python3-jinja2 python3-pexpect xz which \
      #         rpcgen zstd lz4 cpio glibc-langpack-en libacl git-lfs hostname
      #       ;;
      #     debian* | ubuntu* )
      #       sudo apt update -y
      #       sudo apt upgrade -y
      #       sudo apt install -y gawk wget git diffstat unzip texinfo gcc build-essential \
      #         chrpath socat cpio python3 python3-pip python3-pexpect xz-utils debianutils \
      #         iputils-ping python3-git python3-jinja2 python3-subunit zstd liblz4-tool \
      #         file locales libacl1 git-lfs make libxml2-utils
      #       sudo locale-gen en_US.UTF-8
      #       ;;
      #     * )
      #       exit 1
      #       ;;
      #     esac
      # - name: install repo tool
      #   run: |
      #     export PATH="${HOME}/.local/bin:${PATH}"
      #     mkdir -p ${HOME}/.local/bin
      #     echo "path: ${PATH}"
      #     curl https://storage.googleapis.com/git-repo-downloads/repo > ${HOME}/.local/bin/repo
      #     chmod a+rx ${HOME}/.local/bin/repo
      #     repo || true
      # - name: repo init and sync
      #   shell: bash
      #   run: |
      #     export PATH="${HOME}/.local/bin:${PATH}"
      #     repo init -u $MANIFEST_URI -b $MANIFEST_BRANCH -m $MANIFEST_NAME --no-clone-bundle --no-repo-verify
      #     # mkdir -p .repo/local_manifests
      #     # cat >.repo/local_manifests/local_manifest.xml <<EOF
      #     # <\?xml version=\"1.0\" encoding=\"UTF-8\"\?>
      #     # <manifest>
      #     # </manifest>
      #     # EOF
      #     repo sync
      # - name: scripts/images-build fetch
      #   run: |
      #     [ -n "$DISTROS" ] || ( echo "Required variable unset DISTROS" ; exit 1 )
      #     [ -n "$MACHINES" ] || ( echo "Required variable unset MACHINES" ; exit 1 )
      #     export PATH="${HOME}/.local/bin:${PATH}"
      #     export BB_NUMBER_THREADS="$(( $(nproc) * 0.50 ))"
      #     export PARALLEL_MAKE="-j$(( $(nproc) * 0.50 ))"
      #     for distro in $DISTROS; do
      #       for machine in $MACHINES; do
      #         scripts/images-build --distro=$distro --machine=$machine --target="--runall=fetch distro-image distro-sdk-image"
      #       done
      #     done
      # - name: scripts/images-build build
      #   run: |
      #     export PATH="${HOME}/.local/bin:${PATH}"
      #     scripts/images-build --target="distro-image distro-sdk-image"
