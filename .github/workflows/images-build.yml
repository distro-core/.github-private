name: Images Build

# An action to perform a default images build for the selected
# devices. Requires organization secrets vars.PUBLIC_SSH_KEY and
# secrets.PRIVATE_SSH_KEY be defined and valid for successful sync to
# the repositories referenced in the manifest.

# Runs on
# [ self-hosted, linux, almalinux ]

on:
  workflow_dispatch:

concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  job-1:
    runs-on: [ self-hosted, dc2 ]
    permissions:
      actions: write
    env:
      MANIFEST_URI: git@github.com:distro-core/distro-manifest.git
      MANIFEST_BRANCH: main
      MANIFEST_NAME: distro-head-scarthgap.xml
    steps:
      - shell: bash
        run: |
          : set env NOW
          echo "NOW=$(date -Isec)" >> $GITHUB_ENV
      - shell: bash
        run: |
          : set path
          echo "::add-mask::$HOME"
          if [[ :$PATH: == *:"$HOME/.local/bin":* ]]; then
            echo "PATH alredy contains $HOME/.local/bin"
          else
            localbin=$HOME/.local/bin
            mkdir -p $localbin
            echo "PATH=$localbin:$PATH" >> $GITHUB_ENV
          fi
      - shell: bash
        run: |
          : install ssh keys
          workflows_ssh_id=workflows-tmp-id-ssh
          workflows_ssh_cfg=workflows-tmp-ssh-config
          cat >$workflows_ssh_id <<EOF
          ${{ secrets.PRIVATE_SSH_KEY }}
          EOF
          cat >$workflows_ssh_cfg <<EOF
          Host *
            IdentitiesOnly yes
            IdentityFile $HOME/.ssh/$workflows_ssh_id
          EOF
          install -d -m 0700 $HOME/.ssh
          install -D -m 0600 $workflows_ssh_id $HOME/.ssh/$workflows_ssh_id
          install -D -m 0644 $workflows_ssh_cfg $HOME/.ssh/config
          # ssh git@github.com || true
      - shell: bash
        run: |
          : install git settings
          git config --global http.sslVerify true
      - shell: bash
        run: |
          : install repo tool
          curl https://storage.googleapis.com/git-repo-downloads/repo > $HOME/.local/bin/repo
          chmod a+rx $HOME/.local/bin/repo
          [ -n "$(command -v repo)" ] || exit 1
      - shell: bash
        run: |
          : install host dependency
          source /etc/os-release
          case $ID in
          almalinux*)
            printf "${{ secrets.PRIVATE_PASSWORD_SUDO }}\n" | sudo -S bash -c "
              dnf install -y epel-release
              yum install -y dnf-plugins-core
              dnf config-manager --set-enabled crb
              dnf makecache
              dnf upgrade -y
              dnf install -y gawk make wget tar bzip2 gzip python3 unzip perl patch \
                  diffutils diffstat git cpp gcc gcc-c++ glibc-devel texinfo chrpath \
                  ccache socat perl-Data-Dumper perl-Text-ParseWords perl-Thread-Queue \
                  python3-pip python3-GitPython python3-jinja2 python3-pexpect xz which \
                  rpcgen zstd lz4 cpio glibc-langpack-en libacl git-lfs hostname
            " || exit 1
            ;;
          debian* | ubuntu* )
            printf "${{ secrets.PRIVATE_PASSWORD_SUDO }}\n" | sudo -S bash -c "
              apt update -y
              apt upgrade -y
              apt install -y gawk wget git diffstat unzip texinfo gcc build-essential \
                  chrpath socat cpio python3 python3-pip python3-pexpect xz-utils debianutils \
                  iputils-ping python3-git python3-jinja2 python3-subunit zstd liblz4-tool \
                  file locales libacl1 git-lfs make libxml2-utils
              locale-gen en_US.UTF-8
            " || exit 1
            ;;
          fedora* )
            printf "${{ secrets.PRIVATE_PASSWORD_SUDO }}\n" | sudo -S bash -c "
              dnf install -y gawk make wget tar bzip2 gzip python3 unzip perl patch diffutils \
                diffstat git cpp gcc gcc-c++ glibc-devel texinfo chrpath ccache perl-Data-Dumper \
                perl-Text-ParseWords perl-Thread-Queue perl-bignum socat python3-pexpect findutils \
                which file cpio python python3-pip xz python3-GitPython python3-jinja2 rpcgen \
                perl-FindBin perl-File-Compare perl-File-Copy perl-locale zstd lz4 hostname \
                glibc-langpack-en libacl
            " || exit 1
            ;;
          opensuse* )
            printf "${{ secrets.PRIVATE_PASSWORD_SUDO }}\n" | sudo -S bash -c "
              zypper install -y python gcc gcc-c++ git chrpath make wget python-xml diffstat \
                makeinfo python-curses patch socat python3 python3-curses tar python3-pip \
                python3-pexpect xz which python3-Jinja2 rpcgen zstd lz4 bzip2 gzip hostname \
                libacl1
              pip3 install GitPython
            " || exit 1
            ;;
          * )
            exit 1
            ;;
          esac
      - shell: bash
        run: |
          : repo init and sync
          repo init --manifest-url=$MANIFEST_URI --manifest-branch=$MANIFEST_BRANCH --manifest-name=$MANIFEST_NAME --no-clone-bundle --no-repo-verify
          repo sync
  job-2:
    needs: job-1
    runs-on: [ self-hosted, linux, almalinux ]
    permissions:
      actions: write
    strategy:
      matrix:
        DISTRO:
          - distro-core
          - distro-full
        MACHINE:
          - com-cexpress-bt
          - com-cexpress-sl
          - sbc-gene-bt06
        IMAGE:
          - distro-image
          - distro-sdk-image
    steps:
      - shell: bash
        run: |
          : bitbake fetch
          echo "${{ matrix.MACHINE }} ${{ matrix.DISTRO }} ${{ matrix.IMAGE }}"
          scripts/images-build --machine=${{ matrix.MACHINE }} --distro=${{ matrix.DISTRO }} --target="-k --runall=fetch ${{ matrix.IMAGE }}"
  job-3:
    needs: job-2
    runs-on: [ self-hosted, linux, almalinux ]
    permissions:
      actions: write
    strategy:
      matrix:
        DISTRO:
          - distro-core
          - distro-full
        MACHINE:
          - sbc-gene-bt06
        IMAGE:
          - distro-image
          - distro-sdk-image
    steps:
      - shell: bash
        run: |
          : bitbake build
          # export BB_NO_NETWORK="1"
          export BB_NUMBER_THREADS=$(( $(nproc) * 50 / 100 ))
          export PARALLEL_MAKE=-j$(( $(nproc) * 50 / 100 ))
          echo "${{ matrix.MACHINE }} ${{ matrix.DISTRO }} ${{ matrix.IMAGE }}"
          scripts/images-build --machine=${{ matrix.MACHINE }} --distro=${{ matrix.DISTRO }} --target="-k ${{ matrix.IMAGE }}"
