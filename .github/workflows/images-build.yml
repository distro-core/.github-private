name: Images Build

# An action to perform a default images build for the selected
# devices. Requires organization secrets vars.PUBLIC_SSH_KEY and
# secrets.PRIVATE_SSH_KEY be defined and valid for successful sync to
# the repositories referenced in the manifest.

# Requires
# vars.PUBLIC_SSH_KEY
# secrets.PRIVATE_SSH_KEY

# Runs on
# [ self-hosted, linux, almalinux ]

on:
  workflow_dispatch:

env:
  DISTROS: distro-core distro-full
  MACHINES: sbc-gene-bt06
  IMAGES: distro-image distro-sdk-image
  MANIFEST_URI: git@github.com:distro-core/distro-manifest.git
  MANIFEST_BRANCH: main
  MANIFEST_NAME: distro-head-scarthgap.xml

defaults:
  run:
    shell: bash

# concurrency:
#   group: ${{ github.name }}-${{ github.workflow }}-${{ github.head_ref }}
#   cancel-in-progress: true

jobs:
  job:
    runs-on: [ self-hosted, linux, almalinux ]
    permissions:
      actions: write
    steps:
      ### PREPARE
      - uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ssh-key: ${{ secrets.PRIVATE_SSH_KEY }}
      - name: Install ssh keys
        run: |
          echo "::add-mask::$HOME"
          cat >id_ed25519.pub <<EOF
          ${{ vars.PUBLIC_SSH_KEY }}
          EOF
          cat >id_ed25519 <<EOF
          ${{ secrets.PRIVATE_SSH_KEY }}
          EOF
          install -d -m 0700 $HOME/.ssh
          install -D -m 0600 id_ed25519 $HOME/.ssh/id_ed25519
          install -D -m 0644 id_ed25519.pub $HOME/.ssh/id_ed25519.pub
          if ! grep -q -e '.ssh/id_ed25519$' $HOME/.ssh/config; then
            printf '\nHost *\n  IdentitiesOnly yes\n  IdentityFile %s\n\n%s' "$HOME/.ssh/id_ed25519" "$(cat $HOME/.ssh/config)" >ssh_config
            install -D -m 0644 ssh_config $HOME/.ssh/config
          fi
          ssh git@github.com || true
      - name: Install host dependency
        uses: ./.github/workflows/actions/images-build-deps
      - name: Use repo init and repo sync
        shell: bash
        run: |
          repo init --manifest-url=$MANIFEST_URI --manifest-branch=$MANIFEST_BRANCH --manifest-name=$MANIFEST_NAME --no-clone-bundle --no-repo-verify
          repo sync
      - name: Save build downloads
        uses: actions/cache/save@v4
        with:
          key: ${{ runner.os }}-repo
          path: |
            .gitignore
            .repo
            .vscode
            README*
            layers
            scripts
      - name: Bitbake fetch
        run: |
          for machine in $MACHINES; do
            for distro in $DISTROS; do
              echo "::group::Bitbake fetch $machine $distro $IMAGES"
              scripts/images-build --clean-sstate --machine=$machine --distro=$distro --target="-k --runall=fetch $IMAGES"
              echo "::endgroup::"
            done
          done
      - name: Save build downloads
        uses: actions/cache/save@v4
        with:
          key: ${{ runner.os }}-build-downloads
          path: |
            build/downloads/*.bz2
            build/downloads/*.crate
            build/downloads/*.gz
            build/downloads/*.lz
            build/downloads/*.py
            build/downloads/*.tar
            build/downloads/*.tbz2
            build/downloads/*.tgz
            build/downloads/*.txt
            build/downloads/*.xz
            build/downloads/*.zip
      - name: Bitbake build
        run: |
          # export BB_NO_NETWORK="1"
          export BB_NUMBER_THREADS=$(( $(nproc) * 2 / 5 ))
          export PARALLEL_MAKE=-j$(( $(nproc) * 2 / 5 ))
          for machine in $MACHINES; do
            for distro in $DISTROS; do
              echo "::group::Bitbake build $machine $distro $IMAGES"
              scripts/images-build --machine=$machine --distro=$distro --target="-k $IMAGES"
              echo "::endgroup::"
            done
          done
      - name: Save build sstate-cache
        uses: actions/cache/save@v4
        with:
          key: ${{ runner.os }}-build-sstate-cache
          path: |
            build/sstate-cache
